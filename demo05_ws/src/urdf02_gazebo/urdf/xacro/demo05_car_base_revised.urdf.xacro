<robot name="my_base" xmlns:xacro="http://www.ros.org/wiki/xacro">
    <!-- 封装变量、常量 -->
    <xacro:property name="PI" value="3.14159265358979323846" />
    <!-- 宏:黑色设置 -->
    <material name="black">
      <color rgba="0.0 0.0 0.0 0.5" />
    </material>
  
    <!-- 0.添加 base_footprint -->
    <xacro:property name="base_footprint_radius" value="0.001" /> <!-- base_footprint 半径  -->
    <link name="base_footprint">
      <visual>
        <geometry>
          <sphere radius="${base_footprint_radius}" />
        </geometry>
      </visual>
    </link>
  
    <!-- 1.底盘 -->
    <!-- 1-1.添加底盘 -->
    <!--  
      形状: 圆柱
        半径：0.1m
        高度: 0.08m
        离地: 0.015m
        重量：2kg
      -->
    <!-- 底盘属性封装 -->
    <xacro:property name="base_link_radius" value="0.1" /> <!-- base_link 半径 -->
    <xacro:property name="base_link_length" value="0.08" /> <!-- base_link 高度 -->
    <xacro:property name="base_link_mass" value="2" /> <!-- base_link 重量 -->
    <xacro:property name="earth_space" value="0.015" /> <!-- 离地间距 -->
    <xacro:property name="base_joint_z" value="${base_link_length / 2 + earth_space}" />
  
    <!-- 1-2.底盘link -->
    <link name="base_link">

      <visual>
        <geometry>
          <cylinder radius="${base_link_radius}" length="${base_link_length}" />
        </geometry>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
        <material name="base_link_color">
          <color rgba="0.1 0.5 0.2 0.5" />
        </material>
      </visual>
  
      <collision>
        <geometry>
          <cylinder radius="${base_link_radius}" length="${base_link_length}" />
        </geometry>  
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
        <!-- 
          这段代码的作用是定义与ODE物理引擎相关的接触参数。
          其中，"min_depth"参数定义了碰撞体间最小的深度距离，
          即当两个碰撞体之间的距离小于该值时，将被认为发生了碰撞。
        -->
        <contact>
          <ode>
            <min_depth>0.001</min_depth>
          </ode>
        </contact>  
      </collision>

      <!-- 调用惯性矩阵函数 -->
      <xacro:cylinder_inertial_matrix m="${base_link_mass}" r="${base_link_radius}"
        h="${base_link_length}" />

    </link>
    
    <!-- 1-2.底盘joint -->
    <joint name="base_link2base_footprint" type="fixed">
      <parent link="base_footprint" />
      <child link="base_link" />
      <origin xyz="0 0 ${base_joint_z}" rpy="0.0 0.0 0.0" />
    </joint>
    
    <!-- 1-3.gezebo底盘颜色设置标签 -->
    <gazebo reference="base_link">
      <material>Gazebo/Yellow</material>
    </gazebo>
    <!-- 2.添加驱动轮 -->
    <!--  
          形状: 圆柱
          半径: 0.0325m
          厚度: 0.015m
      -->
    <!-- 2-1.驱动轮属性封装 -->
    <xacro:property name="wheel_radius" value="0.0325" /><!-- 半径 -->
    <xacro:property name="wheel_length" value="0.015" /><!-- 宽度 -->
    <xacro:property name="wheel_mass" value="0.05" /><!-- 质量 -->
    <!-- 注意: 结果是负数 -->
    <xacro:property name="wheel_joint_z"
      value="${ -(earth_space + base_link_length / 2 - wheel_radius) }" />
  
    <!-- 2-2.驱动轮宏实现 -->
    <!-- 函数封装(方便调用) 底盘就一个不需要调用 而驱动论有两个要调用两次 -->
    <!--  
          wheel_name: left 或 right
          flag： 1 或 -1
      -->
    <xacro:macro name="wheel_func" params="wheel_name flag">
      <!-- 2-2-1.驱动轮link -->
      <link name="${wheel_name}_wheel_link">

        <visual>
          <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_length}" />
          </geometry>
          <origin xyz="0.0 0.0 0.0" rpy="${PI / 2} 0.0 0.0" />
          <material name="wheel_color">
            <color rgba="0 0 0 0.7" />
          </material>
        </visual>
  
        <collision>
          <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_length}" />
          </geometry>
          <origin xyz="0.0 0.0 0.0" rpy="${PI / 2} 0.0 0.0" />
        </collision>
  
        <xacro:cylinder_inertial_matrix m="${wheel_mass}" r="${wheel_radius}" h="${wheel_length}" />
      
      </link>
      
      <!-- gezebo自己的颜色设置标签 -->
      <gazebo reference="${wheel_name}_wheel_link">
        <material>Gazebo/Red</material>
      </gazebo>
  
      <!-- 2-2-2.驱动轮joint -->
      <joint name="${wheel_name}_wheel_joint" type="continuous">
        <parent link="base_link" />
        <child link="${wheel_name}_wheel_link" />
        <!-- 
          x 无偏移
          y 车体半径
          z z = 车体高度/2 + 离地间距 - 车轮半径 记得加负号是负值
        -->
        <origin
          xyz="0 ${flag * base_link_radius} ${wheel_joint_z}" rpy="0.0 0.0 0.0" />
        <axis xyz="0 1 0" />
      </joint>
    </xacro:macro>
    <!-- 2-3.调用宏 -->
    <xacro:wheel_func wheel_name="base_l" flag="1" />
    <xacro:wheel_func wheel_name="base_r" flag="-1" />
    <!-- 3.支撑轮 -->
    <!--  
      形状: 球
      半径:0.0075m
    -->
    <!-- 3-1.支撑轮属性封装 -->
    <xacro:property name="support_wheel_radius" value="0.0075" /> <!-- 支撑轮半径 -->
    <xacro:property name="support_wheel_mass" value="0.01" /> <!-- 支撑轮重量 -->
    <!-- 注意: 结果是负数 -->
    <xacro:property name="support_joint_z"
      value="${ (base_link_length / 2 + earth_space - support_wheel_radius) * -1 }" />
    <!-- 3-2.支撑轮宏实现 -->
    <xacro:macro name="support_wheel_func" params="support_wheel_name flag">
      <!-- 3-2-1.支撑轮link -->
      <link name="${support_wheel_name}_wheel">
        <visual>
          <geometry>
            <sphere radius="${support_wheel_radius}" />
          </geometry>
          <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
          <material name="wheel_color">
            <color rgba="0 0 0 0.7" />
          </material>
        </visual>
        <collision>
          <geometry>
            <sphere radius="${support_wheel_radius}" />
          </geometry>
          <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
        </collision>
        <xacro:sphere_inertial_matrix m="${support_wheel_mass}" r="${support_wheel_radius}" />
      </link>
      <!-- gezebo自己的颜色设置标签 -->
      <gazebo reference="${support_wheel_name}_wheel">
        <material>Gazebo/Red</material>
      </gazebo>
      <!-- 3-2-2.支撑轮joint -->
      <joint name="${support_wheel_name}_wheel2base_link" type="continuous">
        <parent link="base_link" />
        <child link="${support_wheel_name}_wheel" />
        <!-- 
            x 相对底盘中心0.08
            y 无偏移
            z z = 车体高度/2 + 离地间距 - 万向车轮半径 记得加负号是负值
        -->
        <origin
          xyz="${flag * 0.08} 0 ${support_joint_z}" />
        <axis xyz="1 1 1" />
      </joint>
    </xacro:macro>
  
    <xacro:support_wheel_func support_wheel_name="front" flag="1" />
    <xacro:support_wheel_func support_wheel_name="back" flag="-1" />
  
  </robot>